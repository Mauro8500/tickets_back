swagger: "2.0"
info:
  description: "Esta documentación se refiere a un sistema de venta de tickets"
  version: "1.0.0"
  title: "Sistema de venta de tickets"
host: "tickets.swagger.io"
basePath: "/v1"
tags:
- name: "vendedores"
  description: "Operaciones de vendedores"
- name: "clientes"
  description: "Operaciones de clientes"
- name: "eventos"
  description: "Operaciones de eventos"
- name: "compras"
  description: "Operaciones de compras"
- name: "dashboard"
  description: "Operaciones de dashboard"
schemes:
- "http"
paths:
  /vectormontopormes:
    get:
      tags:
      - "dashboard"
      summary: "Devuelve un vector con el monto de dinero generado por mes"
      description: "Este endpoint permite recuperar el monto de dinero generado por la venta de tickets al mes"
      operationId: "getMontoPorMes"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "get exitoso"
        "400":
          description: "solicitud invalida"
  /vectorentradaspormes:
    get:
      tags:
      - "dashboard"
      summary: "Devuelve un vector con la cantidad de tickets vendidos por mes"
      description: "Este endpoint permite recuperar la cantidad de tickets vendidos por mes"
      operationId: "getEntradasPorMes"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "get exitoso"
        "400":
          description: "solicitud invalida"
  /vectoreventospormes:
    get:
      tags:
      - "dashboard"
      summary: "Devuelve un vector con la cantidad de eventos que comienzan cada mes"
      description: "Este endpoint permite recuperar la cantidad de eventos que comienzan cada mes"
      operationId: "getEventosPorMes"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "get exitoso"
        "400":
          description: "solicitud invalida"
  /vectortickets:
    get:
      tags:
      - "dashboard"
      summary: "Devuelve un vector con la cantidad de tickets comprados y cancelados en el último mes o de manera global"
      description: "Este endpoint permite recuperar un vector con dos valores. El primer valor representa el número de tickets comprados y el segundo valor representa el número de tickets cancelados. Si se envia el parámetro opcion=mes en el query los resultados son del último mes. Si no se envia el parámetro los resultados son globales"
      operationId: "getVectorTickets"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "opcion"
        in: "query"
        description: "se debe enviar para que los resultados sean del último mes"
        required: false
        type: "string"
      responses:
        "200":
          description: "get exitoso"
        "400":
          description: "solicitud invalida"
  /vectoreventos:
    get:
      tags:
      - "dashboard"
      summary: "Devuelve un vector con la cantidad de eventos finalizados, cancelados, pendientes y en progreso para el último mes o de manera global"
      description: "Este endpoint permite recuperar un vector con cuatro valores. El primer valor representa el número de eventos finalizados. El segundo valor representa el número de eventos cancelados. El tercer valor representa el número de eventos pendientes. El cuarto valor representa el número de eventos en progreso. Si se envia el parámetro opcion=mes en el query los resultados son del último mes. Si no se envia el parámetro los resultados son globales"
      operationId: "getVectorEventos"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "opcion"
        in: "query"
        description: "se debe enviar para que los resultados sean del último mes"
        required: false
        type: "string"
      responses:
        "200":
          description: "get exitoso"
        "400":
          description: "solicitud invalida"
  /vectorcompras:
    get:
      tags:
      - "dashboard"
      summary: "Devuelve un vector con la cantidad de compras completadas y canceladas en el último mes o de manera global"
      description: "Este endpoint permite recuperar un vector con dos valores. El primer valor representa el número de compras completadas y el segundo valor representa el número de compras canceladas. Si se envia el parámetro opcion=mes en el query los resultados son del último mes. Si no se envia el parámetro los resultados son globales"
      operationId: "getVectorCompras"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "opcion"
        in: "query"
        description: "se debe enviar para que los resultados sean del último mes"
        required: false
        type: "string"
      responses:
        "200":
          description: "get exitoso"
        "400":
          description: "solicitud invalida"
  /tickets:
    put:
      tags:
      - "compras"
      summary: "Incrementa el valor de tickets vendidos de un evento"
      description: "Este endpoint permite incrementar la cantidad de tickets vendidos de un evento. Para esto se debe enviar un body con el id del evento y la cantidad de tickets solicitados por la transacción"
      operationId: "putTickets"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "objeto putTicket"
        required: true
        schema:
          $ref: "#/definitions/putTicket"
      responses:
        "200":
          description: "put exitoso"
        "400":
          description: "solicitud invalida"
  /compras:
    post:
      tags:
      - "compras"
      summary: "Agrega un registro de compra"
      description: ""
      operationId: "postCompra"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "objeto Compra"
        required: true
        schema:
          $ref: "#/definitions/Compra"
      responses:
        "200":
          description: "post exitoso"
        "400":
          description: "solicitud invalida"
    put:
      tags:
      - "compras"
      summary: "Cancela una compra"
      description: ""
      operationId: "putCompra"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "objeto putCompra"
        required: true
        schema:
          $ref: "#/definitions/putCompra"
      responses:
        "200":
          description: "put exitoso"
        "400":
          description: "solicitud invalida"
    get:
      tags:
      - "compras"
      summary: "Recupera los registros de compra de un cliente o de todos"
      description: "El endpoint recupera los registros de compra de un cliente si se envía su id como parametro de query. Si no se envía el id se recuperan los registros de compra de todos los clientes"
      operationId: "getCompras"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "_id"
        in: "query"
        description: "id de cliente"
        required: false
        type: "string"
      responses:
        "200":
          description: "get exitoso"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Compra"
        "400":
          description: "solicitud invalida"
  /authvendedores:     
    get:
      tags:
      - "vendedores"
      summary: "Autentica un vendedor"
      description: "Se debe enviar un body con los parámetros mail y password al endpoint. Si la combinación mail y password existe en la base de datos el endpoint devuelve los datos del vendedor. Si no existe se retorna un objeto vacío"
      operationId: "authVendedores"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "objeto Auth"
        required: true
        schema:
          $ref: "#/definitions/Auth"
      responses:
        "200":
          description: "un objeto con los datos del vendedor o un objeto vacío"
        "400":
          description: "solicitud invalida"
  /authclientes:
    get:
      tags:
      - "clientes"
      summary: "Autentica un cliente"
      description: "Se debe enviar un body con los parámetros mail y password al endpoint. Si la combinación mail y password existe en la base de datos el endpoint devuelve los datos del cliente. Si no existe se retorna un objeto vacío"
      operationId: "authClientes"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "objeto Auth"
        required: true
        schema:
          $ref: "#/definitions/Auth"
      responses:
        "200":
          description: "un objeto con los datos del cliente o un objeto vacío"
        "400":
          description: "solicitud invalida"
  /comentarios:     
    get:
      tags:
      - "eventos"
      summary: "Recupera los comentarios de uno o todos los eventos"
      description: "El endpoint recupera los comentarios de u evento si se envia el id del evento como parámetro query o los comentarios de todos los eventos si no se envia este parámetro"
      operationId: "getComentarios"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "idEvento"
        in: "query"
        description: "id de evento"
        required: false
        type: "string"
      responses:
        "200":
          description: "get exitoso"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Comentario"
        "400":
          description: "solicitud invalida"
    post:
      tags:
      - "eventos"
      summary: "Agrega un comentario a un evento"
      description: ""
      operationId: "postComentario"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "objeto Comentario"
        required: true
        schema:
          $ref: "#/definitions/Comentario"
      responses:
        "200":
          description: "post exitoso"
        "400":
          description: "solicitud invalida"
  /calificaciones:     
    get:
      tags:
      - "eventos"
      summary: "Recupera el número y promedio de calificaciones de un evento o las calificaciones de todos los eventos"
      description: "Si se envia el id del evento como parámetro en el query el endpoint recupera un vector con dos valores. El primer valor representa el número de calificaciones de un evento. El segundo valor representa el promedio de estas calificaciones. Si no se envia el parámetro el endpoint devuelve las calificaciones de todos los eventos"
      operationId: "getCalificaciones"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "idEvento"
        in: "query"
        description: "id de evento"
        required: false
        type: "string"
      responses:
        "200":
          description: "get exitoso"
        "400":
          description: "solicitud invalida"
    post:
      tags:
      - "eventos"
      summary: "Agrega una calificación a un evento"
      description: ""
      operationId: "postCalificacion"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "objeto Calificacion"
        required: true
        schema:
          $ref: "#/definitions/Calificacion"
      responses:
        "200":
          description: "post exitoso"
        "400":
          description: "solicitud invalida"
  /vendedores:
    post:
      tags:
      - "vendedores"
      summary: "Agrega un vendedor"
      description: ""
      operationId: "postVendedor"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "objeto Vendedor"
        required: true
        schema:
          $ref: "#/definitions/Vendedor"
      responses:
        "200":
          description: "post exitoso"
        "400":
          description: "solicitud invalida"
    get:
      tags:
      - "vendedores"
      summary: "Recupera vendedores"
      description: "El endpoint busca todos los vendedores. Tambien puede buscar a un vendedor con su id o con su mail. Para esto se debe mandar el id o el mail del vendedor deseado como parametro de query"
      operationId: "getVendedores"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "_id"
        in: "query"
        description: "id de vendedor"
        required: false
        type: "string"
      - name: "mail"
        in: "query"
        description: "mail de vendedor"
        required: false
        type: "string"
      responses:
        "200":
          description: "get exitoso"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Vendedor"
        "400":
          description: "solicitud invalida"
    put:
      tags:
      - "vendedores"
      summary: "Actualiza el teléfono o password del vendedor"
      description: "Para cambiar el teléfono del vendedor se debe mandar un body al endpoint con el id del vendedor y el telefono. Para cambiar el password del vendedor se debe mandar un body al endpoint con el id, el password actual y el password nuevo del vendedor"
      operationId: "putVendedores"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Objeto que incluye el parámetro _id y el parámetro telefono o los parametros oldPassword y newPassword"
        required: true
        schema:
          $ref: "#/definitions/putVendedor"
      responses:
        "200":
          description: "put exitoso"
        "400":
          description: "solicitud invalida"
  /clientes:
    post:
      tags:
      - "clientes"
      summary: "Agrega un cliente"
      description: ""
      operationId: "postCliente"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "objeto Cliente"
        required: true
        schema:
          $ref: "#/definitions/Cliente"
      responses:
        "200":
          description: "post exitoso"
        "400":
          description: "solicitud invalida"
    get:
      tags:
      - "clientes"
      summary: "Recupera clientes"
      description: "El endpoint busca todos los clientes. Tambien puede buscar a un cliente con su id. Para esto se debe mandar el id del cliente deseado como parametro de query"
      operationId: "getClientes"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "_id"
        in: "query"
        description: "id de cliente"
        required: false
        type: "string"
      responses:
        "200":
          description: "get exitoso"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Cliente"
        "400":
          description: "solicitud invalida"
    put:
      tags:
      - "clientes"
      summary: "Actualiza el teléfono, password o configuración SMS del cliente"
      description: "Para cambiar el teléfono del cliente se debe mandar un body al endpoint con el id del cliente y el telefono. Para cambiar el password del cliente se debe mandar un body al endpoint con el id, el password actual y el password nuevo del cliente. Para cambiar la configuracion SMS del cliente se debe mandar un body al endpoint con el id la configuracion SMS del cliente"
      operationId: "putClientes"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Objeto que incluye el parámetro _id y el parámetro telefono o el parámetro smsActivado o los parametros oldPassword y newPassword"
        required: true
        schema:
          $ref: "#/definitions/putCliente"
      responses:
        "200":
          description: "put exitoso"
        "400":
          description: "solicitud invalida"
  /eventos:
    post:
      tags:
      - "eventos"
      summary: "Agrega un evento"
      description: ""
      operationId: "postEvento"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "objeto Evento"
        required: true
        schema:
          $ref: "#/definitions/Evento"
      responses:
        "200":
          description: "post exitoso"
        "400":
          description: "solicitud invalida"
    put:
      tags:
      - "eventos"
      summary: "Actualizar estado y/o capacidad de un evento"
      description: ""
      operationId: "putEvento"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Objeto que incluye el id de un evento y al menos uno de los parametros estado o capacidad"
        required: true
        schema:
          $ref: "#/definitions/putEvento"
      responses:
        "200":
          description: "put exitoso"
        "400":
          description: "solicitud invalida"
    get:
      tags:
      - "eventos"
      summary: "Recupera eventos"
      description: "El endpoint recupera todos los eventos. También puede buscar eventos con cierto nombre. Para esto se debe mandar el nombre del evento deseado como parametro de query. Finalmente, se pueden buscan los eventos de un vendedor. Para esto se debe pasar el id del organizador como parametro de query"
      operationId: "getEventos"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "nombre"
        in: "query"
        description: "nombre de evento"
        required: false
        type: "string"
      - name: "organizador"
        in: "query"
        description: "id del vendedor"
        required: false
        type: "string"
      responses:
        "200":
          description: "get exitoso"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Evento"
        "400":
          description: "solicitud invalida"
  /confirmacionclientes:
    get:
      tags:
      - "clientes"
      summary: "Verifica un cliente"
      description: "Este endpoint abilita a un cliente para realizar transacciones. Se ejecuta cuando un cliente confirma su correo electronico"
      operationId: "getConfirmacionClientes"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "c"
        in: "query"
        description: "id de cliente"
        required: true
        type: "string"
      responses:
        "200":
          description: "get exitoso"
        "400":
          description: "solicitud invalida"
  /confirmacionvendedores:
    get:
      tags:
      - "vendedores"
      summary: "Verifica un vendedor"
      description: "Este endpoint abilita a un vendedor para realizar transacciones. Se ejecuta cuando un vendedor confirma su correo electronico"
      operationId: "getConfirmacionVendedores"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "v"
        in: "query"
        description: "id de vendedor"
        required: true
        type: "string"
      responses:
        "200":
          description: "get exitoso"
        "400":
          description: "solicitud invalida"
definitions:
  Cliente:
    type: "object"
    required:
    - "nombre1"
    - "apellido1"
    - "apellido2"
    - "fechaNacimiento"
    - "ci"
    - "mail"
    - "password"
    - "departamento"
    - "ciudad"
    properties:
      nombre1:
        type: "string"
        example: "Carlos"
      nombre2:
        type: "string"
        example: "Diego"
      apellido1:
        type: "string"
        example: "Mendizabal"
      apellido2:
        type: "string"
        example: "Mostajo"
      fechaNacimiento:
        type: "string"
        example: "1999-02-26"
      password:
        type: "string"
      ci:
        type: "string"
        example: "6105591"
      mail:
        type: "string"
        example: "carlos.mendizabal@ucb.edu.bo"
      telefono:
        type: "number"
        example: 73747260
      departamento:
        type: "string"
        example: "La Paz"
      ciudad:
        type: "string"
        example: "La Paz"
      smsActivado:
        type: "boolean"
        
  Compra:
    type: "object"
    required:
    - "idEvento"
    - "nombreEvento"
    - "direccionEvento"
    - "fechaInicio"
    - "fechaFin"
    - "idCliente"
    - "nombre1"
    - "apellido1"
    - "apellido2"
    - "nit"
    - "cantidadTickets"
    - "precioUnitario"
    - "correoCliente"
    - "smsActivado"
    properties:
      idEvento:
        type: "string"
        example: "6dsk3kdls4"
      nombreEvento:
        type: "string"
        example: "Concierto de Bad Bunny"
      direccionEvento:
        type: "string"
        example: "Avenida Arce Calle 4 Número 340"
      fechaInicio:
        type: "string"
        example: "2022-04-30"
      fechaFin:
        type: "string"
        example: "2022-04-30"
      idCliente:
        type: "string"
        example: "ad9093asld"
      nombre1:
        type: "string"
        example: "Carlos"
      nombre2:
        type: "string"
        example: "Diego"
      apellido1:
        type: "string"
        example: "Mendizabal"
      apellido2:
        type: "string"
        example: "Mostajo"
      nit:
        type: "number"
        example: 6105591293
      cantidadTickets:
        type: "number"
        example: 3
      precioUnitario:
        type: "number"
        example: 350
      correoCliente:
        type: "string"
        example: "carlos.mendizabal@ucb.edu.bo"
      numTelefono:
        type: "number"
        example: 73747260
      smsActivado:
        type: "boolean"
        
  Evento:
    type: "object"
    required:
    - "nombre"
    - "lugar"
    - "capacidad"
    - "organizador"
    - "fechaInicio"
    - "fechaFin"
    - "precio"
    properties:
      nombre:
        type: "string"
        example: "Concierto de Bad Bunny"
      lugar:
        type: "string"
        example: "Avenida Arce Calle 4 Número 340"
      capacidad:
        type: "number"
        example: 20134
      organizador:
        type: "string"
        example: "ad9093asld"
      fechaInicio:
        type: "string"
        example: "2022-04-30"
      fechaFin:
        type: "string"
        example: "2022-04-30"
      precio:
        type: "number"
        example: 350
        
  Comentario:
    type: "object"
    required:
    - "idEvento"
    - "idCliente"
    - "comentario"
    - "fecha"
    properties:
      idEvento:
        type: "string"
        example: "ssdio24eak"
      idCliente:
        type: "string"
        example: "agad8sadas2"
      comentario:
        type: "string"
        example: "Este evento fue muy divertido"
      fecha:
        type: "string"
        example: "2022-04-30"
        
  Calificacion:
    type: "object"
    required:
    - "idEvento"
    - "idCliente"
    - "calificacion"
    - "fecha"
    properties:
      idEvento:
        type: "string"
        example: "ssdio24eak"
      idCliente:
        type: "string"
        example: "agad8sadas2"
      calificacion:
        type: "number"
        example: 3
      fecha:
        type: "string"
        example: "2022-04-30"

  Auth:
    type: "object"
    required:
    - "mail"
    - "password"
    properties:
      mail:
        type: "string"
        example: "usuario1@gmail.com"
      password:
        type: "string"
        
  putEvento:
    type: "object"
    required:
    - "_id"
    properties:
      _id:
        type: "string"
        example: "ssdio24eak"
      capacidad:
        type: "number"
        example: 20300
      estado:
        type: "string"
        example: "cancelado"

  putCliente:
    type: "object"
    required:
    - "_id"
    - "smsActivado"
    - "oldPassword"
    - "newPassword"
    properties:
      _id:
        type: "string"
        example: "ssdio24eak"
      smsActivado:
        type: "boolean"
      oldPassword:
        type: "string"
      newPassword:
        type: "string"

  putVendedor:
    type: "object"
    required:
    - "_id"
    - "oldPassword"
    - "newPassword"
    properties:
      _id:
        type: "string"
        example: "ssdio24eak"
      oldPassword:
        type: "string"
      newPassword:
        type: "string"

  putTicket:
    type: "object"
    required:
    - "_id"
    - "tickets"
    properties:
      _id:
        type: "string"
        example: "ssdio24eak"
      tickets:
        type: "number"
        
  putCompra:
    type: "object"
    required:
    - "_id"
    properties:
      _id:
        type: "string"
        example: "ssdio24eak"
        
  Vendedor:
    type: "object"
    required:
    - "nombre1"
    - "apellido1"
    - "apellido2"
    - "fechaNacimiento"
    - "ci"
    - "mail"
    - "password"
    - "departamento"
    - "ciudad"
    - "banco"
    - "cuenta"
    - "esEmpresa"
    properties:
      nombre1:
        type: "string"
        example: "Carlos"
      nombre2:
        type: "string"
        example: "Diego"
      apellido1:
        type: "string"
        example: "Mendizabal"
      apellido2:
        type: "string"
        example: "Mostajo"
      fechaNacimiento:
        type: "string"
        example: "1999-02-26"
      password:
        type: "string"
      ci:
        type: "string"
        example: "6105591"
      mail:
        type: "string"
        example: "carlos.mendizabal@ucb.edu.bo"
      telefono:
        type: "number"
        example: 73747260
      departamento:
        type: "string"
        example: "La Paz"
      ciudad:
        type: "string"
        example: "La Paz"
      banco:
        type: "string"
        example: "BCP"
      cuenta:
        type: "string"
        example: "492123093120319"
      esEmpresa:
        type: "boolean"
      nombreEmpresa:
        type: "string"
        example: "Coca Cola"
      telefonoEmpresa:
        type: "number"
        example: 27973726
      direccionEmpresa:
        type: "string"
        example: "Avenida Arce Calle 4 Número 340"
      sitioWebEmpresa:
        type: "string"
        example: "www.coca-cola.com"